name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-check-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        working-directory: pixlie
        run: cargo fmt --all -- --check

      - name: Run clippy
        working-directory: pixlie
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check if TypeScript types are up to date
        working-directory: pixlie
        run: |
          cargo run --bin export_types
          if ! git diff --quiet; then
            echo "TypeScript types are not up to date. Please run 'cargo run --bin export_types' and commit the changes."
            git diff
            exit 1
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Run tests
        working-directory: pixlie
        run: cargo test --verbose

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        working-directory: webapp
        run: |
          npm install -g pnpm
          pnpm install
          pnpm build

      - name: Build binary
        working-directory: pixlie
        run: cargo build --release --target ${{ matrix.target }}

      - name: Test binary execution (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: pixlie
        run: |
          ./target/${{ matrix.target }}/release/pixlie --help
          ./target/${{ matrix.target }}/release/export_types --help || true

      - name: Test binary execution (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: pixlie
        run: |
          ./target/${{ matrix.target }}/release/pixlie.exe --help
          ./target/${{ matrix.target }}/release/export_types.exe --help

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: webapp
        run: |
          npm install -g pnpm
          pnpm install

      - name: Run linting
        working-directory: webapp
        run: pnpm lint

      - name: Build frontend
        working-directory: webapp
        run: pnpm build

      - name: Run tests (if available)
        working-directory: webapp
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm test --run || echo "Tests not configured yet"
          else
            echo "No tests configured yet"
          fi

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        working-directory: webapp
        run: |
          npm install -g pnpm
          pnpm install
          pnpm build

      - name: Build and run integration tests
        working-directory: pixlie
        run: |
          cargo build --release
          # Run basic smoke tests
          timeout 10s ./target/release/pixlie server --port 18080 &
          SERVER_PID=$!
          sleep 3
          
          # Test if server responds
          curl -f http://localhost:18080/api/config || {
            echo "Server failed to respond"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          }
          
          kill $SERVER_PID 2>/dev/null || true
          echo "Integration test passed"