// pixlie/src/bin/export_types.rs

use pixlie::database::{
    DownloadStats, Entity, EntityReference, EntityRelation, ExtractionStats, HnItem,
};
use pixlie::entity_extraction::ModelInfo;
use pixlie::handlers::{
    ConfigResponse, DownloadModelRequest, DownloadStatusResponse, EntityDetailResponse,
    EntityItemWithHighlights, ExecuteToolRequestNew, ExecuteToolResponse, ExtractionStatusResponse,
    GetEntitiesRequest, GetEntitiesResponse, GetEntityItemsRequest, GetEntityItemsResponse,
    GetEntityReferencesRequest, GetEntityReferencesResponse, GetItemsRequest, GetItemsResponse,
    GetRelationsRequest, GetRelationsResponse, GetToolSchemaResponse, GetToolsResponse,
    ModelsResponse, SearchEntitiesRequest, SearchEntitiesResponse, SetDataFolderRequest,
    StartDownloadRequest, StartExtractionRequest, ValidateToolParamsRequest,
    ValidateToolParamsResponse,
};
use pixlie::tools::{
    Parameter, ParameterType, QueryContext, ToolArguments, ToolCategory, ToolConstraints,
    ToolDescriptor, ToolExample, ToolMetrics, ToolParameters, ToolResult, ValidationError,
    ValidationRule, types,
};
use std::fs;
use std::path::Path;
use ts_rs::TS;

// Helper function to export a single type to its own file
fn export_type<T: TS + 'static>(output_dir: &Path) -> std::io::Result<()> {
    let type_name = T::name();
    let output_path = output_dir.join(format!("{type_name}.ts"));

    let mut content = "// This file is auto-generated by `cargo run --bin export_types`\n// Do not edit manually.\n\n".to_string();

    // Export only the type definition without imports to avoid duplicates
    // ts-rs already includes necessary imports in export_to_string()
    content.push_str(&T::export_to_string().unwrap());

    fs::write(&output_path, content)?;
    println!("✅ TypeScript type exported to {output_path:?}");
    Ok(())
}

fn main() -> std::io::Result<()> {
    let output_dir = Path::new("../webapp/src/types");
    if !output_dir.exists() {
        fs::create_dir_all(output_dir)?;
    }

    // Handlers
    export_type::<ConfigResponse>(output_dir)?;
    export_type::<SetDataFolderRequest>(output_dir)?;
    export_type::<DownloadStatusResponse>(output_dir)?;
    export_type::<StartDownloadRequest>(output_dir)?;
    export_type::<ModelsResponse>(output_dir)?;
    export_type::<DownloadModelRequest>(output_dir)?;
    export_type::<ExtractionStatusResponse>(output_dir)?;
    export_type::<StartExtractionRequest>(output_dir)?;
    export_type::<GetItemsRequest>(output_dir)?;
    export_type::<GetItemsResponse>(output_dir)?;
    export_type::<GetEntitiesRequest>(output_dir)?;
    export_type::<GetEntitiesResponse>(output_dir)?;
    export_type::<GetRelationsRequest>(output_dir)?;
    export_type::<GetRelationsResponse>(output_dir)?;
    export_type::<SearchEntitiesRequest>(output_dir)?;
    export_type::<SearchEntitiesResponse>(output_dir)?;
    export_type::<EntityDetailResponse>(output_dir)?;
    export_type::<GetEntityReferencesRequest>(output_dir)?;
    export_type::<GetEntityReferencesResponse>(output_dir)?;
    export_type::<GetEntityItemsRequest>(output_dir)?;
    export_type::<GetEntityItemsResponse>(output_dir)?;
    export_type::<EntityItemWithHighlights>(output_dir)?;
    export_type::<Entity>(output_dir)?;
    export_type::<EntityReference>(output_dir)?;
    export_type::<EntityRelation>(output_dir)?;

    // Database
    export_type::<DownloadStats>(output_dir)?;
    export_type::<ExtractionStats>(output_dir)?;
    export_type::<HnItem>(output_dir)?;

    // Entity Extraction
    export_type::<ModelInfo>(output_dir)?;

    // Tool System
    export_type::<ToolCategory>(output_dir)?;
    export_type::<ParameterType>(output_dir)?;
    export_type::<ValidationRule>(output_dir)?;
    export_type::<Parameter>(output_dir)?;
    export_type::<ToolParameters>(output_dir)?;
    export_type::<ToolExample>(output_dir)?;
    export_type::<ToolConstraints>(output_dir)?;
    export_type::<ToolDescriptor>(output_dir)?;
    export_type::<ToolArguments>(output_dir)?;
    export_type::<QueryContext>(output_dir)?;
    export_type::<ToolResult>(output_dir)?;
    export_type::<ValidationError>(output_dir)?;
    export_type::<ToolMetrics>(output_dir)?;

    // Tool Handlers
    export_type::<GetToolsResponse>(output_dir)?;
    export_type::<GetToolSchemaResponse>(output_dir)?;
    export_type::<ValidateToolParamsRequest>(output_dir)?;
    export_type::<ValidateToolParamsResponse>(output_dir)?;
    export_type::<ExecuteToolRequestNew>(output_dir)?;
    export_type::<ExecuteToolResponse>(output_dir)?;

    // Tool Types
    export_type::<types::TimeRange>(output_dir)?;
    export_type::<types::ScoreRange>(output_dir)?;
    export_type::<types::HnItem>(output_dir)?;
    export_type::<types::Entity>(output_dir)?;
    export_type::<types::EntityRelation>(output_dir)?;
    export_type::<types::SearchItemsParams>(output_dir)?;
    export_type::<types::SearchItemsResponse>(output_dir)?;
    export_type::<types::SearchItemsFilters>(output_dir)?;
    export_type::<types::FilterItemsParams>(output_dir)?;
    export_type::<types::FilterItemsResponse>(output_dir)?;
    export_type::<types::SearchEntitiesParams>(output_dir)?;
    export_type::<types::SearchEntitiesResponse>(output_dir)?;
    export_type::<types::EntityWithStats>(output_dir)?;
    export_type::<types::ExploreRelationsParams>(output_dir)?;
    export_type::<types::ExploreRelationsResponse>(output_dir)?;
    export_type::<types::RelationWithEntities>(output_dir)?;
    export_type::<types::ValidationResult>(output_dir)?;
    export_type::<types::ValidationWarning>(output_dir)?;
    export_type::<types::ToolSchema>(output_dir)?;
    export_type::<types::ToolSchemaExample>(output_dir)?;

    println!(
        "\n✅ All TypeScript types exported successfully to '{}'.",
        output_dir.display()
    );
    Ok(())
}
