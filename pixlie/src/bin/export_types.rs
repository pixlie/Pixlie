// pixlie/src/bin/export_types.rs

use pixlie::database::{
    DownloadStats, Entity, EntityReference, EntityRelation, ExtractionStats, HnItem,
};
use pixlie::entity_extraction::ModelInfo;
use pixlie::handlers::{
    ConfigResponse, DownloadModelRequest, DownloadStatusResponse, EntityDetailResponse,
    EntityItemWithHighlights, ExtractionStatusResponse, GetEntitiesRequest, GetEntitiesResponse,
    GetEntityItemsRequest, GetEntityItemsResponse, GetEntityReferencesRequest,
    GetEntityReferencesResponse, GetItemsRequest, GetItemsResponse, GetRelationsRequest,
    GetRelationsResponse, ModelsResponse, SearchEntitiesRequest, SearchEntitiesResponse,
    SetDataFolderRequest, StartDownloadRequest, StartExtractionRequest,
};
use pixlie::tools::types::{
    Entity as ToolEntity, EntityRelation as ToolEntityRelation, EntityWithStats,
    ExploreRelationsParams, ExploreRelationsResponse, FilterItemsParams, FilterItemsResponse,
    HnItem as ToolHnItem, RelationWithEntities, ScoreRange, SearchEntitiesParams,
    SearchItemsFilters, SearchItemsParams, SearchItemsResponse, TimeRange, ToolSchema,
    ToolSchemaExample, ValidationResult, ValidationWarning,
};
use pixlie::tools::{
    Parameter, ParameterType, QueryContext, ToolArguments, ToolCategory, ToolConstraints,
    ToolDescriptor, ToolExample, ToolMetrics, ToolParameters, ToolResult, ValidationError,
    ValidationRule,
};
use std::fs;
use std::path::Path;
use ts_rs::TS;

// Helper function to export a single type to its own file in a specific subdirectory
fn export_type_to_subdir<T: TS + 'static>(base_dir: &Path, subdir: &str) -> std::io::Result<()> {
    let output_dir = base_dir.join(subdir);
    if !output_dir.exists() {
        fs::create_dir_all(&output_dir)?;
    }

    let type_name = T::name();
    let output_path = output_dir.join(format!("{type_name}.ts"));

    let mut content = "// This file is auto-generated by `cargo run --bin export_types`\n// Do not edit manually.\n\n".to_string();

    // Export only the type definition without imports to avoid duplicates
    // ts-rs already includes necessary imports in export_to_string()
    content.push_str(&T::export_to_string().unwrap());

    fs::write(&output_path, content)?;
    println!("‚úÖ TypeScript type exported to {output_path:?}");
    Ok(())
}

// Helper function to create index.ts file for a subdirectory
fn create_index_file(base_dir: &Path, subdir: &str, type_names: &[&str]) -> std::io::Result<()> {
    let output_dir = base_dir.join(subdir);
    let index_path = output_dir.join("index.ts");

    let mut content = "// This file is auto-generated by `cargo run --bin export_types`\n// Do not edit manually.\n\n".to_string();

    for type_name in type_names {
        content.push_str(&format!(
            "export type {{ {type_name} }} from './{type_name}';\n"
        ));
    }

    fs::write(&index_path, content)?;
    println!("‚úÖ Index file created at {index_path:?}");
    Ok(())
}

fn main() -> std::io::Result<()> {
    let base_dir = Path::new("../webapp/src/types");
    if !base_dir.exists() {
        fs::create_dir_all(base_dir)?;
    }

    // === API Types (handlers and requests/responses) ===
    println!("üìÅ Exporting API types...");
    export_type_to_subdir::<ConfigResponse>(base_dir, "api")?;
    export_type_to_subdir::<SetDataFolderRequest>(base_dir, "api")?;
    export_type_to_subdir::<DownloadStatusResponse>(base_dir, "api")?;
    export_type_to_subdir::<StartDownloadRequest>(base_dir, "api")?;
    export_type_to_subdir::<ModelsResponse>(base_dir, "api")?;
    export_type_to_subdir::<DownloadModelRequest>(base_dir, "api")?;
    export_type_to_subdir::<ExtractionStatusResponse>(base_dir, "api")?;
    export_type_to_subdir::<StartExtractionRequest>(base_dir, "api")?;
    export_type_to_subdir::<GetItemsRequest>(base_dir, "api")?;
    export_type_to_subdir::<GetItemsResponse>(base_dir, "api")?;
    export_type_to_subdir::<GetEntitiesRequest>(base_dir, "api")?;
    export_type_to_subdir::<GetEntitiesResponse>(base_dir, "api")?;
    export_type_to_subdir::<GetRelationsRequest>(base_dir, "api")?;
    export_type_to_subdir::<GetRelationsResponse>(base_dir, "api")?;
    export_type_to_subdir::<SearchEntitiesRequest>(base_dir, "api")?;
    export_type_to_subdir::<SearchEntitiesResponse>(base_dir, "api")?;
    export_type_to_subdir::<EntityDetailResponse>(base_dir, "api")?;
    export_type_to_subdir::<GetEntityReferencesRequest>(base_dir, "api")?;
    export_type_to_subdir::<GetEntityReferencesResponse>(base_dir, "api")?;
    export_type_to_subdir::<GetEntityItemsRequest>(base_dir, "api")?;
    export_type_to_subdir::<GetEntityItemsResponse>(base_dir, "api")?;
    export_type_to_subdir::<EntityItemWithHighlights>(base_dir, "api")?;

    let api_types = [
        "ConfigResponse",
        "SetDataFolderRequest",
        "DownloadStatusResponse",
        "StartDownloadRequest",
        "ModelsResponse",
        "DownloadModelRequest",
        "ExtractionStatusResponse",
        "StartExtractionRequest",
        "GetItemsRequest",
        "GetItemsResponse",
        "GetEntitiesRequest",
        "GetEntitiesResponse",
        "GetRelationsRequest",
        "GetRelationsResponse",
        "SearchEntitiesRequest",
        "SearchEntitiesResponse",
        "EntityDetailResponse",
        "GetEntityReferencesRequest",
        "GetEntityReferencesResponse",
        "GetEntityItemsRequest",
        "GetEntityItemsResponse",
        "EntityItemWithHighlights",
    ];
    create_index_file(base_dir, "api", &api_types)?;

    // === Database Types ===
    println!("üìÅ Exporting database types...");
    export_type_to_subdir::<Entity>(base_dir, "database")?;
    export_type_to_subdir::<EntityReference>(base_dir, "database")?;
    export_type_to_subdir::<EntityRelation>(base_dir, "database")?;
    export_type_to_subdir::<DownloadStats>(base_dir, "database")?;
    export_type_to_subdir::<ExtractionStats>(base_dir, "database")?;
    export_type_to_subdir::<HnItem>(base_dir, "database")?;

    let database_types = [
        "Entity",
        "EntityReference",
        "EntityRelation",
        "DownloadStats",
        "ExtractionStats",
        "HnItem",
    ];
    create_index_file(base_dir, "database", &database_types)?;

    // === Extraction Types ===
    println!("üìÅ Exporting extraction types...");
    export_type_to_subdir::<ModelInfo>(base_dir, "extraction")?;

    let extraction_types = ["ModelInfo"];
    create_index_file(base_dir, "extraction", &extraction_types)?;

    // === Tool Types ===
    println!("üìÅ Exporting tool types...");
    // Core tool types from mod.rs
    export_type_to_subdir::<ToolCategory>(base_dir, "tools")?;
    export_type_to_subdir::<ParameterType>(base_dir, "tools")?;
    export_type_to_subdir::<ValidationRule>(base_dir, "tools")?;
    export_type_to_subdir::<Parameter>(base_dir, "tools")?;
    export_type_to_subdir::<ToolParameters>(base_dir, "tools")?;
    export_type_to_subdir::<ToolExample>(base_dir, "tools")?;
    export_type_to_subdir::<ToolConstraints>(base_dir, "tools")?;
    export_type_to_subdir::<ToolDescriptor>(base_dir, "tools")?;
    export_type_to_subdir::<ToolArguments>(base_dir, "tools")?;
    export_type_to_subdir::<QueryContext>(base_dir, "tools")?;
    export_type_to_subdir::<ToolResult>(base_dir, "tools")?;
    export_type_to_subdir::<ValidationError>(base_dir, "tools")?;
    export_type_to_subdir::<ToolMetrics>(base_dir, "tools")?;

    // Tool-specific types from types.rs (using aliased imports)
    export_type_to_subdir::<ToolHnItem>(base_dir, "tools")?;
    export_type_to_subdir::<ToolEntity>(base_dir, "tools")?;
    export_type_to_subdir::<ToolEntityRelation>(base_dir, "tools")?;
    export_type_to_subdir::<TimeRange>(base_dir, "tools")?;
    export_type_to_subdir::<ScoreRange>(base_dir, "tools")?;
    export_type_to_subdir::<SearchItemsParams>(base_dir, "tools")?;
    export_type_to_subdir::<SearchItemsResponse>(base_dir, "tools")?;
    export_type_to_subdir::<SearchItemsFilters>(base_dir, "tools")?;
    export_type_to_subdir::<FilterItemsParams>(base_dir, "tools")?;
    export_type_to_subdir::<FilterItemsResponse>(base_dir, "tools")?;
    export_type_to_subdir::<SearchEntitiesParams>(base_dir, "tools")?;
    export_type_to_subdir::<EntityWithStats>(base_dir, "tools")?;
    export_type_to_subdir::<ExploreRelationsParams>(base_dir, "tools")?;
    export_type_to_subdir::<ExploreRelationsResponse>(base_dir, "tools")?;
    export_type_to_subdir::<RelationWithEntities>(base_dir, "tools")?;
    export_type_to_subdir::<ValidationResult>(base_dir, "tools")?;
    export_type_to_subdir::<ValidationWarning>(base_dir, "tools")?;
    export_type_to_subdir::<ToolSchema>(base_dir, "tools")?;
    export_type_to_subdir::<ToolSchemaExample>(base_dir, "tools")?;

    let tool_types = [
        "ToolCategory",
        "ParameterType",
        "ValidationRule",
        "Parameter",
        "ToolParameters",
        "ToolExample",
        "ToolConstraints",
        "ToolDescriptor",
        "ToolArguments",
        "QueryContext",
        "ToolResult",
        "ValidationError",
        "ToolMetrics",
        "HnItem",
        "Entity",
        "EntityRelation",
        "TimeRange",
        "ScoreRange",
        "SearchItemsParams",
        "SearchItemsResponse",
        "SearchItemsFilters",
        "FilterItemsParams",
        "FilterItemsResponse",
        "SearchEntitiesParams",
        "EntityWithStats",
        "ExploreRelationsParams",
        "ExploreRelationsResponse",
        "RelationWithEntities",
        "ValidationResult",
        "ValidationWarning",
        "ToolSchema",
        "ToolSchemaExample",
    ];
    create_index_file(base_dir, "tools", &tool_types)?;

    println!(
        "\n‚úÖ All TypeScript types exported successfully to organized subdirectories in '{}'.",
        base_dir.display()
    );
    println!("üìÅ API types: {}/api/", base_dir.display());
    println!("üìÅ Database types: {}/database/", base_dir.display());
    println!("üìÅ Extraction types: {}/extraction/", base_dir.display());
    println!("üìÅ Tool types: {}/tools/", base_dir.display());
    Ok(())
}
