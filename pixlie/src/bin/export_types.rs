// pixlie/src/bin/export_types.rs

use pixlie::database::{DownloadStats, ExtractionStats, HnItem};
use pixlie::entity_extraction::ModelInfo;
use pixlie::handlers::{
    ConfigResponse, DownloadModelRequest, DownloadStatusResponse, ExtractionStatusResponse,
    GetItemsRequest, GetItemsResponse, ModelsResponse, SetDataFolderRequest, StartDownloadRequest,
    StartExtractionRequest,
};
use std::fs;
use std::path::Path;
use ts_rs::TS;

// Helper function to export a single type to its own file
fn export_type<T: TS + 'static>(output_dir: &Path) -> std::io::Result<()> {
    let type_name = T::name();
    let output_path = output_dir.join(format!("{}.ts", type_name));

    let mut content = "// This file is auto-generated by `cargo run --bin export_types`\n// Do not edit manually.\n\n".to_string();

    // Export only the type definition without imports to avoid duplicates
    // ts-rs already includes necessary imports in export_to_string()
    content.push_str(&T::export_to_string().unwrap());

    fs::write(&output_path, content)?;
    println!("✅ TypeScript type exported to {:?}", output_path);
    Ok(())
}

fn main() -> std::io::Result<()> {
    let output_dir = Path::new("../webapp/src/types");
    if !output_dir.exists() {
        fs::create_dir_all(output_dir)?;
    }

    // Handlers
    export_type::<ConfigResponse>(&output_dir)?;
    export_type::<SetDataFolderRequest>(&output_dir)?;
    export_type::<DownloadStatusResponse>(&output_dir)?;
    export_type::<StartDownloadRequest>(&output_dir)?;
    export_type::<ModelsResponse>(&output_dir)?;
    export_type::<DownloadModelRequest>(&output_dir)?;
    export_type::<ExtractionStatusResponse>(&output_dir)?;
    export_type::<StartExtractionRequest>(&output_dir)?;
    export_type::<GetItemsRequest>(&output_dir)?;
    export_type::<GetItemsResponse>(&output_dir)?;

    // Database
    export_type::<DownloadStats>(&output_dir)?;
    export_type::<ExtractionStats>(&output_dir)?;
    export_type::<HnItem>(&output_dir)?;

    // Entity Extraction
    export_type::<ModelInfo>(&output_dir)?;

    println!(
        "\n✅ All TypeScript types exported successfully to '{}'.",
        output_dir.display()
    );
    Ok(())
}
