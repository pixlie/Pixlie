// pixlie/src/bin/export_types.rs

use pixlie::database::{DownloadStats, ExtractionStats};
use pixlie::entity_extraction::ModelInfo;
use pixlie::handlers::{
    ConfigResponse, DownloadModelRequest, DownloadStatusResponse, ExtractionStatusResponse,
    ModelsResponse, SetDataFolderRequest, StartDownloadRequest, StartExtractionRequest,
};
use std::fs;
use std::path::Path;
use ts_rs::TS;

fn main() -> std::io::Result<()> {
    let mut exports = String::new();

    // Manually add imports for chrono types if needed, or use ts-rs features
    // exports.push_str("import type { DateTime } from 'chrono';\n\n"); // Example if needed

    // Handlers
    exports.push_str(&ConfigResponse::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&SetDataFolderRequest::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&DownloadStatusResponse::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&StartDownloadRequest::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&ModelsResponse::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&DownloadModelRequest::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&ExtractionStatusResponse::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&StartExtractionRequest::export_to_string().unwrap());
    exports.push_str("\n\n");

    // Database
    exports.push_str(&DownloadStats::export_to_string().unwrap());
    exports.push_str("\n\n");
    exports.push_str(&ExtractionStats::export_to_string().unwrap());
    exports.push_str("\n\n");

    // Entity Extraction
    exports.push_str(&ModelInfo::export_to_string().unwrap());
    exports.push_str("\n\n");

    let output_dir = Path::new("../../webapp/src/types");
    if !output_dir.exists() {
        fs::create_dir_all(output_dir)?;
    }
    let output_path = output_dir.join("api.ts");

    let mut content = "// This file is auto-generated by `cargo run --bin export_types`\n// Do not edit manually.\n\n".to_string();
    content.push_str(&exports);

    fs::write(&output_path, content)?;

    println!("âœ… TypeScript types exported to {:?}", output_path);
    Ok(())
}
