// pixlie/build.rs

use std::env;
use std::fs;
use std::path::Path;

fn main() {
    println!("cargo:rerun-if-changed=src/");

    // Generate TypeScript types for tools
    generate_tool_types();
}

fn generate_tool_types() {
    let _out_dir = env::var("OUT_DIR").unwrap();
    let webapp_types_dir = Path::new("../webapp/src/types/tools/");

    // Create the webapp types directory if it doesn't exist
    if !webapp_types_dir.exists() {
        if let Err(e) = fs::create_dir_all(webapp_types_dir) {
            println!("cargo:warning=Failed to create webapp types directory: {e}");
            return;
        }
    }

    // TypeScript generation happens through ts-rs derive macros at compile time
    // The actual files are generated by the ts-rs library when the types are used
    println!("cargo:warning=TypeScript types will be generated by ts-rs during compilation");

    // Create an index file to re-export all tool types
    let index_content = r#"// Auto-generated index file for tool types
// Re-export all tool-related types

export * from './ToolCategory';
export * from './ParameterType';
export * from './ValidationRule';
export * from './Parameter';
export * from './ToolParameters';
export * from './ToolExample';
export * from './ToolConstraints';
export * from './ToolDescriptor';
export * from './ToolArguments';
export * from './QueryContext';
export * from './ToolResult';
export * from './ValidationError';
export * from './ToolMetrics';
export * from './TimeRange';
export * from './ScoreRange';
export * from './SearchItemsParams';
export * from './SearchItemsResponse';
export * from './SearchItemsFilters';
export * from './FilterItemsParams';
export * from './FilterItemsResponse';
export * from './SearchEntitiesParams';
export * from './SearchEntitiesResponse';
export * from './EntityWithStats';
export * from './ExploreRelationsParams';
export * from './ExploreRelationsResponse';
export * from './RelationWithEntities';
export * from './ValidationResult';
export * from './ValidationWarning';
export * from './ToolSchema';
export * from './ToolSchemaExample';
"#;

    let index_path = webapp_types_dir.join("index.ts");
    if let Err(e) = fs::write(&index_path, index_content) {
        println!(
            "cargo:warning=Failed to write index file {}: {e}",
            index_path.display()
        );
    } else {
        println!(
            "cargo:warning=Generated TypeScript index file at {}",
            index_path.display()
        );
    }
}
